.# > name="1- Minimal agent"
.# > keyword="Python"
.# > description="A minimal agent in Python."
.# > agentMode="ONE"
.# > onlyAgentDefinitionSupport="true"
.template 0
function typeToIGSType (type)
   if (type = "STRING")
       return "igs.STRING_T"
   elsif (type = "INTEGER")
       return "igs.INTEGER_T"
   elsif (type = "DOUBLE")
       return "igs.DOUBLE_T"
   elsif (type = "BOOL")
       return "igs.BOOL_T"
   elsif (type = "IMPULSION")
       return "igs.IMPULSION_T"
   elsif (type = "DATA")
       return "igs.DATA_T"
   endif
endfunction typeToIGSType

.endtemplate
.template 1
.ignorecase = 0
.
.####################################################################################
.echo "Generating main.py ..."
.output "main.py"
#!/usr/bin/env -P /usr/bin:/usr/local/bin python3 -B
# coding: utf-8

#
#  main.py
#  $(definition.name) $(definition.version ?? "version " + definition.version)
#  Created $(defined(definition.author) ?? "by " + definition.author ? "") on $(date.picture())
#
.if (defined(definition->plainTextDescription) & string.length(definition->plainTextDescription))
#  $(definition->plainTextDescription:block)
.else
# no description
.endif


import sys
import ingescape as igs

.if (count(definition.input))
#inputs
def input_callback(io_type, name, value_type, value, my_data):
    # add code here if needed
    pass

.endif
.
.if (count(definition.parameter))
def attribute_callback(io_type, name, value_type, value, my_data):
    # add code here if needed
    pass

.endif
.
.if (count(definition.service) > 0)
def service_callback(sender_agent_name, sender_agent_uuid, service_name, arguments, token, my_data):
    # add code here if needed
    pass

.endif
if __name__ == "__main__":
    if len(sys.argv) < 4:
        print("usage: python3 main.py agent_name network_device port")
        devices = igs.net_devices_list()
        print("Please restart with one of these devices as network_device argument:")
        for device in devices:
            print(f" {device}")
        exit(0)

    igs.agent_set_name(sys.argv[1])
.if (defined (definition.version) & string.length(definition.version))
    igs.definition_set_version("$(definition.version)")
.endif
.if (defined (definition->description) & string.length(definition->description))
    igs.definition_set_description("""$(definition->description)""")
.endif
.if (defined (definition.class) & string.length(definition.class))
    igs.definition_set_class("$(definition.class)")
.endif
.if (defined (definition.package) & string.length(definition.package))
    igs.definition_set_package("$(definition.package)")
.endif
    igs.log_set_console(True)
    igs.log_set_file(True, None)
    igs.set_command_line(sys.executable + " " + " ".join(sys.argv))

    igs.debug(f"Ingescape version: {igs.version()} (protocol v{igs.protocol()})")

.for definition.parameter
    igs.attribute_create("$(parameter.name)", $(typeToIGSType(parameter.type)), None)
.if (defined (parameter.description) & string.length(parameter.description))
    igs.attribute_set_description("$(parameter.name)", """$(parameter.description)""")
.endif
.if (defined (parameter.constraint) & string.length(parameter.constraint))
    igs.attribute_add_constraint("$(parameter.name)", "$(parameter.constraint)")
.endif
.if (defined (parameter.detailedTypeFullName) & string.length(parameter.detailedTypeFullName))
.   if (defined (parameter.detailedTypeSpecification) & string.length(parameter.detailedTypeSpecification))
    igs.attribute_set_detailed_type("$(parameter.name)", "$(parameter.detailedTypeFullName)", "$(parameter.detailedTypeSpecification)")
.   else
    igs.attribute_set_detailed_type("$(parameter.name)", "$(parameter.detailedTypeFullName)", "")
.   endif
.endif
    igs.observe_attribute("$(parameter.name)", attribute_callback, None)
.endfor
.if (count(definition.parameter)>0)

.endif
.for definition.input
    igs.input_create("$(input.name)", $(typeToIGSType(input.type)), None)
.if (defined (input.description) & string.length(input.description))
    igs.input_set_description("$(input.name)", """$(input.description)""")
.endif
.if (defined (input.constraint) & string.length(input.constraint))
    igs.input_add_constraint("$(input.name)", "$(input.constraint)")
.endif
.if (defined (input.detailedTypeFullName) & string.length(input.detailedTypeFullName))
.   if (defined (input.detailedTypeSpecification) & string.length(input.detailedTypeSpecification))
    igs.input_set_detailed_type("$(input.name)", "$(input.detailedTypeFullName)", "$(input.detailedTypeSpecification)")
.   else
    igs.input_set_detailed_type("$(input.name)", "$(input.detailedTypeFullName)", "")
.   endif
.endif
    igs.observe_input("$(input.name)", input_callback, None)
.endfor
.if (count(definition.input)>0)

.endif
.for definition.output
    igs.output_create("$(output.name)", $(typeToIGSType(output.type)), None)
.if (defined (output.description) & string.length(output.description))
    igs.output_set_description("$(output.name)", """$(output.description)""")
.endif
.if (defined (output.constraint) & string.length(output.constraint))
    igs.output_add_constraint("$(output.name)", "$(output.constraint)")
.endif
.if (defined (output.detailedTypeFullName) & string.length(output.detailedTypeFullName))
.   if (defined (output.detailedTypeSpecification) & string.length(output.detailedTypeSpecification))
    igs.output_set_detailed_type("$(output.name)", "$(output.detailedTypeFullName)", "$(output.detailedTypeSpecification)")
.   else
    igs.output_set_detailed_type("$(output.name)", "$(output.detailedTypeFullName)", "")
.   endif
.endif
.endfor
.if (count(definition.output)>0)

.endif
.for service
    igs.service_init("$(service.name)", service_callback, None)
.for argument
    igs.service_arg_add("$(service.name)", "$(argument.name)", $(typeToIGSType(argument.type)))
.endfor
.for service.reply
    igs.service_reply_add("$(service.name)", "$(reply.name)");
.   for reply.argument
    igs.service_reply_arg_add("$(service.name)", "$(reply.name)", "$(argument.name)", $(typeToIGSType(argument.type)));
.   endfor
.endfor
.endfor
.if (count(definition.service)>0)

.endif
    igs.start_with_device(sys.argv[2], int(sys.argv[3]))

    input()

    igs.stop()

.if count (project.protobuf) > 0
.####################################################################################
.echo "Generating .proto files ..."
.for project.protobuf
.output "$(protobuf.name:c).proto"
$(protobuf:)
.endfor
.endif
.####################################################################################
.echo "Generating other static files ..."
.output "requirements.txt"
ingescape>=4
.if count (project.protobuf) > 0
protobuf
.endif
.
.output "README.md"
## Prerequisites

* Python3 (https://www.python.org/downloads/)
* Ingescape python binding (from pip)
.if count (project.protobuf) > 0
* Python protobuf package (from pip)
.endif

## Install dependencies
A requirements.txt is provided. Install dependencies using pip
```bash
pip install -r requirements.txt
```

.if count (project.protobuf) > 0
## Protobuf generated code
This project has .proto files used to describe protocol buffer messages.
You will first have to use the protocol buffer compiler (protoc) to generate python code from those .proto files.
This command line should work on a Unix with a standard protoc installation.
```bash
protoc --python_out=./ -I./ *.proto
```
Python code will be generated inside the current directory

For other environement, please refer to your environment's documentation or protoc's documentation.
.endif

## Run
To start the agent, you need to pass an agent name, a network device and a port **in that order** to the main script.
Example:
```bash
python3 main.py MyAgent en0 1337
```

.endtemplate
